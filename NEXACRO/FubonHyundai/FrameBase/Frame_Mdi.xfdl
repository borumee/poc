<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="Frame_Mdi" width="1280" height="36" titletext="MDI 프레임" background="#F1F1F1" onsize="Frame_Mdi_onsize" onload="Frame_Mdi_onload">
    <Layouts>
      <Layout height="36" width="1280">
        <Static id="Static00" taborder="0" top="13" width="66" right="1" height="12" cssclass="sta_MDI_Line"/>
        <Button id="btnPreMdi" taborder="1" top="2" width="30" height="33" right="158" visible="true" onclick="btnPreMdi_onclick" cssclass="btn_MDI_Prev"/>
        <Button id="btnNexMdi" taborder="2" top="2" height="33" width="25" right="133" visible="true" onclick="btnNexMdi_onclick" cssclass="btn_MDI_Next"/>
        <Button id="btnCloseAll" taborder="3" top="2" width="25" height="33" right="78" onclick="btnCloseAll_onclick" tooltiptext="모두닫기" cssclass="btn_MDI_Close"/>
        <Button id="btnMyMenu" taborder="4" top="5" width="26" height="26" onclick="btnMyMenu_onclick" right="7" cssclass="btn_MDI_MyMnu" tooltiptext="MyMenu" enable="false"/>
        <Button id="btnHelp" taborder="5" top="5" width="26" height="26" right="33" tooltiptext="Help" cssclass="btn_MDI_Guide"/>
        <Button id="btnList" taborder="6" top="2" width="25" height="33" right="103" cssclass="btn_MDI_List" onclick="btnList_onclick" tooltiptext="열린창목록"/>
        <Button id="btnPdvClose" taborder="7" top="12" width="25" height="33" cssclass="btn_MDI_ListS" right="103" visible="false" onclick="btnPdvClose_onclick" tooltiptext="열린창목록" text=""/>
        <Div id="divTab" taborder="8" left="5" height="34" top="2" right="205" formscrolltype="none">
          <Layouts>
            <Layout/>
          </Layouts>
        </Div>
        <PopupDiv id="pdvOpenMenu" visible="false" left="1035" top="40" width="245" height="200" oncloseup="pdvOpenMenu_oncloseup">
          <Layouts>
            <Layout>
              <Grid id="grdOpenMenu" taborder="0" top="0" binddataset="gdsOpenMenu" autofittype="col" cssclass="grd_MDI_List" oncellclick="pdvOpenMenu_grdOpenMenu_oncellclick" width="245" height="200" right="0">
                <Formats>
                  <Format id="default">
                    <Columns>
                      <Column size="80"/>
                      <Column size="48" band="right"/>
                    </Columns>
                    <Rows>
                      <Row size="36"/>
                    </Rows>
                    <Band id="body">
                      <Cell text="bind:MENU_NM" tooltiptext="bind:MENU_NM" textAlign="left" cssclass="grd_openList"/>
                      <Cell col="1" displaytype="buttoncontrol" edittype="button" cssclass="grd_listClose"/>
                    </Band>
                  </Format>
                </Formats>
              </Grid>
            </Layout>
          </Layouts>
        </PopupDiv>
        <Button id="Button00" taborder="9" text="화면1" left="0" width="160" bottom="-44" height="32" cssclass="btn_MF_tabS" visible="false" font="normal 700 12px/normal &quot;Malgun Gothic,Tahoma&quot;" textAlign="left" padding="0px 0px 0px 10px"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsTab" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="TAB_ID" type="STRING" size="256"/>
          <Column id="TITLE" type="STRING" size="256"/>
          <Column id="TITLE_KO" type="STRING" size="256"/>
          <Column id="WIN_ID" type="STRING" size="256"/>
          <Column id="MENU_ID" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[this.bClose = true;
this.fvFirstGap = 0;
this.fvBtnGap = 1;
this.fvTabHeight = 32;
this.fvTabExtraRightGap = 21;
this.fvExtraWidth = 16;
this.fvExtraTop = 10;
this.fvExtraHeight = 16;
this.EXTRA_BTN_PREFIX = "EXTRA_";
this.TAB_BTN_PREFIX = "TAB_";
this.fvMenuRow = -1; //열린 화면의 MENU Row
this.fvMenuId; //열린 화면의 MENU Id

/**
 * @description 화면 로드 완료 시 이벤트 함수
*/
this.Frame_Mdi_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	var app = nexacro.getApplication(),
		p   = this.getOwnerFrame().form;
		
	nexacro._OnceCallbackTimer.callonce(this, function() { 
		// gdsOpenMenu(열려있는메뉴) 있을 시 open
		for(var i=0; i<app.gdsOpenMenu.rowcount; i++) {
			let menuId = app.gdsOpenMenu.getColumn(i, "MENU_ID");
			p["fnOpenMenu"].call(p, menuId);
		}	
	}, 10);


};

/**
 * @description 화면 크기 변경 시 이벤트 함수
*/
this.Frame_Mdi_onsize = function(obj:nexacro.Form,e:nexacro.SizeEventInfo)
{
	this.fnRedrawTab();
};

/**
 * 메뉴 tab 삭제
 * @param {string} 메뉴key값
 * @param
 * @return
 * @example
 * @memberOf 
 */
this.fnDelTab = function (winID)
{
	var nRow = this.dsTab.findRow("WIN_ID", winID);
	if (nRow < 0) return false;
	var tabID = this.TAB_BTN_PREFIX + winID;
	
	// Removing Tab button.
	this.fnDelTabBtn(tabID);
	this.dsTab.deleteRow(nRow);
	this.fnRedrawTab();
	return true;
};

/**
 * 메뉴 tab Button 동적생성
 * @public
 * @param {string} 메뉴키값
 * @param {string} 메뉴명
 * @return
 * @example
 * @memberOf 
 */
this.fnAddTab = function (winID, name, sMenuId)
{	
	var nRow = this.dsTab.findRow("WIN_ID", winID);
	
	if (nRow > -1) return nRow;

	var tabID = this.TAB_BTN_PREFIX + winID;
	nRow = this.dsTab.addRow();
	this.dsTab.setColumn(nRow, "TAB_ID", tabID);
	this.dsTab.setColumn(nRow, "WIN_ID", winID);
	this.dsTab.setColumn(nRow, "TITLE", name);
	this.dsTab.setColumn(nRow, "MENU_ID", sMenuId);
	
	this.fvMenuId = sMenuId;
	
	this.fnAddTabBtn(tabID, name);
	this.fnRedrawTab();
	this.isActiveFrame(winID);
	this.bClose = true;
	
	return nRow;
};

/**
 * 메뉴 tab 신규 동적 생성
 * @public
 * @param {string} 메뉴키값
 * @param {string} 메뉴명
 * @return
 * @example
 * @memberOf 
 */
this.fnAddTabBtn = function (tabID, tabName)
{
	var tabObj, btnObj,
		exBtnId = this.EXTRA_BTN_PREFIX + tabID;   //extra button id

	if (this.gfn_isEmpty(this.fnFindObj(tabID))) {
		tabObj = new Button();
		tabObj.init(tabID, this.fnGetLeft(tabID), null, 0, this.fvTabHeight, null, 0);
		this.divTab.addChild(tabObj.name, tabObj);
	}

	tabObj.set_textAlign("left");
	tabObj.set_padding("0px 0px 0px 10px");
	//tabObj.set_text(tabName+"     ");
	tabObj.set_text(tabName);
	tabObj.setEventHandler("onclick", this.btnTab_OnClick, this);
	tabObj.set_visible(true);
	tabObj.show();
	
	var nCompWidth = nexacro.getTextSize(tabName, this.Button00.font).nx + 50;
	
	tabObj.set_cssclass("btn_MF_tabS");
	tabObj.set_width(nCompWidth);
	
	if (this.fnFindObj(exBtnId) == null && tabName != "MAIN" ) {
		btnObj = new Button();
		btnObj.init(exBtnId, tabObj.getOffsetRight() - this.fvTabExtraRightGap, this.fvExtraTop, tabObj.getOffsetRight() - this.fvTabExtraRightGap + this.fvExtraWidth - (tabObj.getOffsetRight() - this.fvTabExtraRightGap), this.fvExtraTop + this.fvExtraHeight - this.fvExtraTop);
		
		this.fnAddObj(exBtnId, btnObj);

		btnObj.set_cursor("hand");
		btnObj.setEventHandler("onclick", this.btnExtra_OnClick, this);
		btnObj.set_visible(true);
		btnObj.show();
		btnObj.set_cssclass("btn_MF_tabClose");
	}
	
	this.fnSetActive(tabID);
};
  
/**
 * 메뉴 tab 이동
 * @public
 * @param {string} 메뉴키값
 * @return
 * @example
 * @memberOf 
 */
this.fnMoveTab = function (winID)
{
	var nRow = this.dsTab.findRow("WIN_ID", winID);
	if (nRow < 0) return nRow;
	
	var tabID = this.TAB_BTN_PREFIX + winID,
		sMenuID = this.dsTab.getColumn(nRow, "MENU_ID");
	this.fvMenuId = sMenuID;
	//나의 메뉴 표시
	this.fvMenuRow = nexacro.getApplication().gdsMyMenu.findRow("MENU_ID", sMenuID);
	
	if (this.fvMenuRow > -1) {
		this.btnMyMenu.set_cssclass("btn_MDI_MyMnuS");
	} else {
		this.btnMyMenu.set_cssclass("btn_MDI_MyMnu");
	}
	
	this.fnSetActive(tabID);
	this.fnRedrawTab();
};

/**
 * 메뉴 tab 변경 처리 함수
 * @public
 * @param {string}WIN_ID fromID
 * @param {string} WIN_ID toID
 * @return
 * @example
 * @memberOf 
 */
this.fnChangeTab = function (fromID, toID)
{
	var nfromRow = this.dsTab.findRow("WIN_ID", fromID),
		ntoRow = this.dsTab.findRow("WIN_ID", toID);
	
	this.dsTab.moveRow(nfromRow, ntoRow);
	this.fnRedrawTab();
};

/**
 * 메뉴 tab id가져오는 함수
 * @public
 * @param {string} 메뉴키값
 * @return
 * @example
 * @memberOf 
 */
this.fnGetTab = function (winID)
{
	return this.dsTab.findRow("WIN_ID", winID);
};

/**
 * 메뉴 현재 tab id가져오는 함수
 * @public
 * @param
 * @return  {string} winid
 * @example
 * @memberOf 
 */
this.fnGetCurTab = function ()
{
	if (this.dsTab.rowposition < 0) {
		return false;
	}
	return this.dsTab.getColumn(this.dsTab.rowposition, "WIN_ID");
};

/**
 * 메뉴 현재 tab 정보 가져오는 함수
 * @public
 * @param
 * @return  {string} winid
 * @example
 * @memberOf 
 */
this.fnGetTabInfo = function (winID, sCol)
{
	var nRow = this.dsTab.findRow("WIN_ID", winID);
	
	if (nRow < 0) {
		return "";
	}
	return this.dsTab.getColumn(nRow, sCol);
};

/**
 * 메뉴 현재 tab title 가져오는 함수
 * @public
 * @param    {string} winID
 * @return  {string} TITLE
 * @example
 * @memberOf 
 */
this.fnGetTitle = function (winID)
{
	var curRow = this.dsTab.findRow("winID", winID);
	if (this.lookup("nRow") < 0) {
		return "";
	}
	return this.dsTab.getColumn(curRow, "TITLE");
};

/**
 *  메뉴 tab title setting
 * @public
 * @param    {string} winID
 * @return  {string} TITLE
 * @example
 * @memberOf 
 */
this.fnSetTitle = function (winID, sTitle)
{
	var nRow = this.dsTab.findRow("WIN_ID", winID);
	if (nRow < 0) {
		return "";
	}

	var tabID = this.TAB_BTN_PREFIX + winID,
		panelObj = this.fnFindObj(tabID);
	
	if ((panelObj == null) || (panelObj == "")) {
		return;
	}
	panelObj.set_text(sTitle);
};

/**
 *  메뉴 tab onclick event 
 * @public
 * @param  
 * @return 
 * @example
 * @memberOf 
 */
this.btnTab_OnClick = function (obj:Button, e:ClickEventInfo)
{
	var winId = obj.name.split(this.TAB_BTN_PREFIX).join("");
	var isOpened = this.isActiveFrame(winId);
	if(!isOpened) {
		var p = this.getOwnerFrame().form,
		menuId = this.dsTab.lookup("WIN_ID", winId, "MENU_ID");
		p["fnOpenMenu"].call(p, menuId);
	}
	
};

/**
 * 메뉴 tab extra버튼 클릭시 발생되는 event
 * @public
 * @param  
 * @return 
 * @example
 * @memberOf 
 */
this.btnExtra_OnClick = function (obj:Button, e:ClickEventInfo)
{     
	var winId = obj.name.split(this.TAB_BTN_PREFIX).join("").split(this.EXTRA_BTN_PREFIX).join("");
	
	this.isActiveFrame(winId);
	this.fnTabOnClose(winId);
};
 
/**
 * 메뉴 tab 닫기 실행 함수
 * @public
 * @param {string} winid
 * @param {string} winid
 * @return 
 * @example
 * @memberOf 
 */
this.fnTabOnClose = function (winid)
{
    var objApp = nexacro.getApplication(),
		nRow = objApp.gdsOpenMenu.findRow("WIN_ID", winid),
		nCloseIdx = nRow;
	
	// MDI 탭버튼 삭제
	if (nRow > -1) {
		this.bClose = false;
		
		// START ::  rChart 있는 화면이면 차트 destroy 함수 호출 - 메모리
		var objBeforeDel = this.getOwnerFrame().form.DivWork.form.components[winid];
		if(objBeforeDel.form.name == "poc01") {
			var chartForm = objBeforeDel.form.Tab01.Tabpage1.form.Div00.form
			if(chartForm.rChartID) {
				chartForm.destroy_rChartAll();
			}
		}
		// END ::  rChart 있는 화면이면 차트 destroy 함수 호출 - 메모리
		
		
		var objDelete = this.getOwnerFrame().form.DivWork.form.removeChild(winid);	
		if (objDelete) {
			objDelete.destroy();
			objDelete = null;
			
			this.fnDelTab(winid);
		}
	}
	
	var bSucc = objApp.gdsOpenMenu.deleteRow(nRow);
	
    if (objApp.gdsOpenMenu.getRowCount() > 0) {
		//현재 액티브된 프레임의 winId를 획득
		var actWinId = objApp.gdsOpenMenu.getColumn(objApp.gdsOpenMenu.rowposition, "WIN_ID");
	  
		// 탭버튼을 닫은 후에 next Tab버튼 설정
		if (winid == actWinId) {
			var nextWinId = objApp.gdsOpenMenu.getColumn(objApp.gdsOpenMenu.rowposition, "WIN_ID");
			this.fnSetActive(this.dsTab.getColumn(this.dsTab.findRow("WIN_ID", nextWinId),"TAB_ID"));
			this.isActiveFrame(nextWinId);
		}else{
			//삭제된 프레임과 활성화된 프레임이 다른경우 활성화된 프레임의 버튼을 활성화
			this.fnSetActive(this.dsTab.getColumn(this.dsTab.findRow("WIN_ID", actWinId),"TAB_ID"));
			this.isActiveFrame(actWinId);
		}
	} else {
		this.btnMyMenu.set_enable(false);
		
		this.getOwnerFrame().form.selectedMenuId = null;
		
		nexacro.getApplication().openInfo = {
			 "CLOSE": "MDI"
		};		
		
		var p = this.getOwnerFrame().form;
		p["fnOpenHome"].call(p);
	}
};

/**
 * 메뉴 Mdi 다음 버튼 
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.btnNexMdi_onclick = function (obj:Button, e:ClickEventInfo)
{
	this.fnMoveFirst(this.fnGetFirstTabIndex() + 1);
	this.fnRedrawTab();
};
 
/**
 * 메뉴 Mdi 이전 버튼 
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.btnPreMdi_onclick = function (obj:Button, e:ClickEventInfo)
{
	this.fnMoveFirst(this.fnGetFirstTabIndex() - 1);
	this.fnRedrawTab();
};

/**
 * menu tab 버튼 첫번째 index 가져오는 함수
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.fnGetFirstTabIndex = function ()
{
	for (var i=0; i<this.dsTab.rowcount; i++) {
		var tabID = this.dsTab.getColumn(i, "TAB_ID"),
			tabObj = this.fnFindObj(tabID);
		if (0 < tabObj.left) {
			return i;
		}
	}
	return -1;
};

/**
 * menu tab 버튼 첫번째 이동 함수
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.fnMoveFirst = function (nMoveIdx)
{
	var nIndex = this.fnGetFirstTabIndex(),
		tabID,
		tabObj,
		btnObj,
		tabFirstObj;

	if (nIndex < 0 || nMoveIdx <= 0 || nMoveIdx >= this.dsTab.rowcount) {
		return;
	}

	tabID = this.dsTab.getColumn(nIndex, "TAB_ID");
	tabFirstObj = this.fnFindObj(tabID);

	tabID = this.dsTab.getColumn(nMoveIdx, "TAB_ID");
	tabObj = this.fnFindObj(tabID);

	var nShiftPos = tabObj.getOffsetLeft() - tabFirstObj.getOffsetLeft();

	for (var i = 0; i < this.dsTab.rowcount; i++) {
		tabID = this.dsTab.getColumn(i, "TAB_ID");
		tabObj = this.fnFindObj(tabID);
		btnObj = this.fnFindObj(this.EXTRA_BTN_PREFIX + tabID);
		tabObj.move(tabObj.getOffsetLeft() - nShiftPos, tabObj.getOffsetTop());
		
		if(this.gfn_isEmpty(btnObj) == false)
			btnObj.move(btnObj.getOffsetLeft() - nShiftPos, btnObj.getOffsetTop());
	}
};

/**
 * menu tab 현재 버튼 이동
 * @public
 * @param {string} tabID
 * @return 
 * @example
 * @memberOf 
 */
this.fnSetActive = function (tabID)
{
	var nRow = this.dsTab.findRow("TAB_ID", tabID);
	if (nRow < 0) {
		return false;
	}
	this.dsTab.set_rowposition(nRow);
	this.fnSetActiveBtn(tabID);
	
	return true;
};

/**
 * menu tab 현재 버튼 이동
 * @public
 * @param {string} tabID
 * @return 
 * @example
 * @memberOf 
 */
this.fnSetActiveBtn = function (tabID)
{
	var tabObj, btnObj;

	for (var i = 0; i < this.dsTab.rowcount; i++) {
		tabObj = this.fnFindObj(this.dsTab.getColumn(i, "TAB_ID"));
		btnObj = this.fnFindObj(this.EXTRA_BTN_PREFIX + this.dsTab.getColumn(i, "TAB_ID"));
		
		if (tabID == this.dsTab.getColumn(i, "TAB_ID")) {
			tabObj.set_cssclass("btn_MF_tabS");
			this.fnShowTabBtn(i);
		} else {
			tabObj.set_cssclass("btn_MF_tab");
		}
	}
};

/**
 * menu tab 현재 버튼 보여주는 함수
 * @public
 * @param {string} nIdx
 * @return 
 * @example
 * @memberOf 
 */
this.fnShowTabBtn = function (nIdx)
{
	var tabObj = this.fnFindObj(this.dsTab.getColumn(nIdx, this.lookup("_ID"))),
		nLeft = tabObj.getOffsetLeft(),
		nRight = tabObj.getOffsetRight();

	if (0 <= nLeft && this.divTab.getOffsetWidth() >= nRight) {
		return;
	}

	nRight = tabObj.getOffsetRight();
	nLeft = tabObj.getOffsetLeft();

	if (nLeft <= 0) {
		this.fnMoveFirst(nIdx);
		return;
	}

	for (var i = this.fnGetFirstTabIndex() + 1; i < this.dsTab.rowcount; i++) {
		tabObj = this.fnFindObj(this.dsTab.getColumn(i, "TAB_ID"));
		if (nRight - tabObj.getOffsetLeft() <= this.divTab.getOffsetWidth()) {
			break;
		}
		this.fnMoveFirst(i);
	}
};

/**
 * menu tab 삭제
 * @public
 * @param {string} tabID
 * @return 
 * @example
 * @memberOf 
 */
this.fnDelTabBtn = function (tabID)
{
	var exBtnId = this.EXTRA_BTN_PREFIX + tabID,
		tabObj = this.fnFindObj(tabID),
		btnObj = this.fnFindObj(exBtnId),
		nShitLeft = tabObj.getOffsetWidth() + this.fvBtnGap;
		curRow = this.dsTab.findRow("TAB_ID", tabID);

	var DelObj = this.fnFindObj(this.dsTab.getColumn(curRow, "TAB_ID")),
		DelObjLeft = tabObj.getOffsetLeft();
	
	if (DelObjLeft == 1) {
		if(this.dsTab.rowcount > 1) {
			this.btnPreMdi_onclick();
		}
	}
	
	this.fnRemoveObj(exBtnId);
	this.fnRemoveObj(tabID);

	var windId = tabID.replace(this.TAB_BTN_PREFIX, ""),
		nRow = this.dsTab.findRow("WIN_ID", windId);
   
	if (DelObjLeft < 0) {
		for (var i = 0 ; i < nRow ; i++) {
			tabObj = this.fnFindObj(this.dsTab.getColumn(i, "TAB_ID"));
			btnObj = this.fnFindObj(this.EXTRA_BTN_PREFIX + this.dsTab.getColumn(i, "TAB_ID"));
			tabObj.move(tabObj.getOffsetLeft() + nShitLeft, tabObj.getOffsetTop());
			btnObj.move(btnObj.getOffsetLeft() + nShitLeft, btnObj.getOffsetTop());
		}
	} else {
		for (var i = curRow + 1; i < this.dsTab.rowcount; i++) {
			tabObj = this.fnFindObj(this.dsTab.getColumn(i, "TAB_ID"));
			btnObj = this.fnFindObj(this.EXTRA_BTN_PREFIX + this.dsTab.getColumn(i, "TAB_ID"));
			tabObj.move(tabObj.getOffsetLeft() - nShitLeft, tabObj.getOffsetTop());
			btnObj.move(btnObj.getOffsetLeft() - nShitLeft, btnObj.getOffsetTop());
		}
	}
	
	this.bClose = true;
};

/**
 * menu tab 찾는 함수
 * @public
 * @param {string} tabID
 * @return 
 * @example
 * @memberOf 
 */
this.fnFindObj = function (strId)
{
	return this.divTab.form.components[strId];
};

/**
 * menu tab 삭제  함수
 * @public
 * @param {string} strId
 * @return 
 * @example
 * @memberOf 
 */
this.fnRemoveObj = function (strId)
{
	if (this.fnFindObj(strId) == null) {
		return;
	}
	
	var objDelete = this.divTab.removeChild(strId);
	if (objDelete) {
		objDelete.destroy();
		objDelete = null;
	}
	
	this.btnMyMenu.set_cssclass("btn_MDI_MyMnu");
};

/**
 * menu tab 추가   함수
 * @public
 * @param {string} strId
 * @return 
 * @example
 * @memberOf 
 */
this.fnAddObj = function (strId, obj)
{
	return this.divTab.addChild(strId, obj);
};

/**
 * menu tab 체크 
 * @public
 * @param 
 * @return 
 * @example
 * @memberOf 
 */
this.fnRedrawTab = function ()
{
	this.fnCheckShowBtnAll();
	this.fnSetTabSpinBtnShow();
};

/**
 * menu tab 모든 버튼 체크 
 * @public
 * @param 
 * @return 
 * @example
 * @memberOf 
 */
this.fnCheckShowBtnAll = function ()
{
	if (this.dsTab.rowcount == 0) return;

	var tabFirstObj = this.fnFindObj(this.dsTab.getColumn(0, "TAB_ID")),
		tabLastObj = this.fnFindObj(this.dsTab.getColumn(this.dsTab.rowcount - 1, "TAB_ID")),
		nLeft = tabFirstObj.getOffsetLeft(),
		nRight = tabLastObj.getOffsetRight();

	if (this.divTab.getOffsetWidth() >= (nRight - nLeft)) {
		this.fnMoveFirst(0);
		return;
	}
};

/**
 * left size조정 
 * @public
 * @param 
 * @return 
 * @example
 * @memberOf 
 */
this.fnGetLeft = function (tabID)
{
	var curRow = this.dsTab.findRow("TAB_ID", tabID);
	if (curRow == 0) return this.fvFirstGap;

	var prevTab = this.fnFindObj(this.dsTab.getColumn(curRow - 1, "TAB_ID"));
	return prevTab.getOffsetRight() + this.fvBtnGap;
};

/**
 * width size조정 
 * @public
 * @param {object} 버튼
 * @param {name}   버튼명
 * @return 
 * @example
 * @memberOf 
 */
this.fnGetWidth = function (obj, name)
{
    var tabID = obj.name,
		curRow = this.dsTab.findRow("TAB_ID", tabID),
		tabObj = this.fnFindObj(this.dsTab.getColumn(curRow, "TAB_ID")),
		objSize = nexacro.getTextSize(name, obj.font);
	
	return objSize.nx + 30;
};

/**
 * 모든 화면 닫기 처리 함수
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.btnCloseAll_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
    var objApp = nexacro.getApplication(),
		iFramesCnt = objApp.gdsOpenMenu.getRowCount();
	
	for (var i=iFramesCnt; i>=0; i--) {
		this.fnTabOnClose(objApp.gdsOpenMenu.getColumn(i, "WIN_ID"));
	}
	
	this.getOwnerFrame().form.selectedMenuId = null;
};

/**
 * mdi spin 버튼 visible 처리
 * @public
 * @return 
 * @example
 * @memberOf 
 */
this.fnSetTabSpinBtnShow = function ()
{
	if (this.dsTab.rowcount == 0) {
		this.btnPreMdi.set_enable(false);
		this.btnNexMdi.set_enable(false);
		return;
	}

	var tabObj = this.fnFindObj(this.dsTab.getColumn(this.dsTab.rowcount - 1, "TAB_ID"));

	if (this.divTab.getOffsetWidth() < tabObj.getOffsetRight()) {
		this.btnNexMdi.set_enable(true);
	} else {
		this.btnNexMdi.set_enable(false);
	}

	tabObj = this.fnFindObj(this.dsTab.getColumn(0, "TAB_ID"));

	if (tabObj.getOffsetLeft() < 0) {
		this.btnPreMdi.set_enable(true);
	} else {
		this.btnPreMdi.set_enable(false);
	}
};

/**
 * 윈도우 키를 기준으로 열려있는 화면 여부 확인
 * @private
 * @param {string} winid: 윈도우 생성 키
 * @param {string} aArgs  : 전달인자
 * @return {boolen}
 * @example
 *
 * @memberOf 
 */
this.isActiveFrame = function (winid, aArgs)
{
	if (this.gfn_isEmpty(winid)){return true;}
	
	var framesInfo = this.getOwnerFrame().form.DivWork.form.components;

	if (framesInfo[winid]) {
		this.fnMoveTab(winid);   //tab이동
		this.fnActiveWorkFrame(winid);
		return true;
	}
};

/**
 * 윈도우 키를 기준으로 화면 활성화
 * @private
 * @param {string} winid: 윈도우 생성 키
 * @return {boolen}
 * @example
 *
 * @memberOf 
 */
this.fnActiveWorkFrame = function(winid)
{
	var framesInfo = this.getOwnerFrame().form.DivWork.form.components;
	var rtn = false;
	
	for (var i=0;i<framesInfo.length;i++) {
		var sWinId = framesInfo[i].name;
		
		if (sWinId.indexOf("divWork_") != -1) {
			if (sWinId == winid) {
				framesInfo[sWinId].set_visible(true);
				rtn = true;
			} else {
				framesInfo[sWinId].set_visible(false);
			}
		}
	}
	
	return rtn;
};

/*
 *	@description  열린메뉴 목록 버튼 클릭 이벤트
 */
this.btnList_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var nWidth = this.pdvOpenMenu.width,
		nHeight = this.pdvOpenMenu.height;
	
    if (nexacro.getApplication().gdsOpenMenu.rowcount > 0) {
		this.btnList.set_visible(false);
		this.btnPdvClose.set_visible(true);
		this.pdvOpenMenu.trackPopupByComponent(obj, -200, 36);
		this.pdvOpenMenu.form.grdOpenMenu.setFocus();
		this.pdvOpenMenu.form.grdOpenMenu.selectCell(0,0,true);
	}
};

/*
 *	@description  열린메뉴 목록 닫기 버튼 클릭 이벤트
 */
this.btnPdvClose_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	if (this.btnPdvClose.visible) {
		this.btnList.set_visible(true);
		this.btnPdvClose.set_visible(false);
	}
};

/*
 *	@description  열린메뉴 팝업 디비전이 닫히는 경우
 */
this.pdvOpenMenu_oncloseup = function(obj:nexacro.PopupDiv,e:nexacro.EventInfo)
{
	if (this.btnPdvClose.visible) {
		this.btnList.set_visible(true);
		this.btnPdvClose.set_visible(false);
	}
};

/*
 *	@description  열린메뉴 그리드 클릭 시
 */
this.pdvOpenMenu_grdOpenMenu_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	var objDs = nexacro.getApplication().gdsOpenMenu;
	
	// 메뉴명 클릭 시
	if (e.col == 0) {
		var sMenuId = objDs.getColumn(e.row, "MENU_ID");
		var p = this.getOwnerFrame().form;
		p["fnOpenMenu"].call(p, sMenuId);
	}
	// 화면을 닫는다.
	else if (e.col == 1) {
		var winId = objDs.getColumn(e.row, "WIN_ID");
		this.fnTabOnClose(winId);
	}
	
	this.pdvOpenMenu.closePopup();
};

/*
 *	@description  나의 메뉴 등록/해제
 */
this.btnMyMenu_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var objApp = nexacro.getApplication();
	switch (obj.cssclass)
	{
		case "btn_MDI_MyMnuS" : //나의 메뉴 해제
			obj.set_cssclass("btn_MDI_MyMnu");
			objApp.gdsMyMenu.deleteRow(this.fvMenuRow);
			//console.log('나의 메뉴 해제', this.fvMenuRow)
			break;
			
		case "btn_MDI_MyMnu" : //나의 메뉴 등록
			obj.set_cssclass("btn_MDI_MyMnuS");
			this.fvMenuRow = objApp.gdsMyMenu.addRow();
			objApp.gdsMyMenu.copyRow(this.fvMenuRow, objApp.gdsMenu, objApp.gdsMenu.findRow("MENU_ID", this.fvMenuId));
			//console.log('나의 메뉴 등록', this.fvMenuRow, objApp.gdsMyMenu.saveJSON())
			break;
	}
};]]></Script>
  </Form>
</FDL>
